{"name": "test_login_with_valid_credentials[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=125.0.6422.142)\nStacktrace:\n\tGetHandleVerifier [0x00007FF61F5022C2+60002]\n\t(No symbol) [0x00007FF61F47CA59]\n\t(No symbol) [0x00007FF61F337D09]\n\t(No symbol) [0x00007FF61F388A32]\n\t(No symbol) [0x00007FF61F37B4D1]\n\t(No symbol) [0x00007FF61F3AC28A]\n\t(No symbol) [0x00007FF61F37ADF6]\n\t(No symbol) [0x00007FF61F3AC4A0]\n\t(No symbol) [0x00007FF61F3CBCC7]\n\t(No symbol) [0x00007FF61F3AC033]\n\t(No symbol) [0x00007FF61F379657]\n\t(No symbol) [0x00007FF61F37A251]\n\tGetHandleVerifier [0x00007FF61F813E2D+3278285]\n\tGetHandleVerifier [0x00007FF61F860190+3590448]\n\tGetHandleVerifier [0x00007FF61F8561D0+3549552]\n\tGetHandleVerifier [0x00007FF61F5B1DE6+779654]\n\t(No symbol) [0x00007FF61F487ACF]\n\t(No symbol) [0x00007FF61F482EE4]\n\t(No symbol) [0x00007FF61F483072]\n\t(No symbol) [0x00007FF61F472C4F]\n\tBaseThreadInitThunk [0x00007FFDC3AA7344+20]\n\tRtlUserThreadStart [0x00007FFDC48A26B1+33]", "trace": "self = <Pytest.sample.test_Login.TestLogin object at 0x0000017D478B7320>\n\n    def test_login_with_valid_credentials(self):\n>       self.driver.find_element(By.XPATH,\"//span[text()='My Account']\").click()\n\ntest_Login.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\dell\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\dell\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\dell\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000017D48A572C0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF61F472C4F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFDC3AA7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFDC48A26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=125.0.6422.142)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF61F5022C2+60002]\nE       \t(No symbol) [0x00007FF61F47CA59]\nE       \t(No symbol) [0x00007FF61F337D09]\nE       \t(No symbol) [0x00007FF61F388A32]\nE       \t(No symbol) [0x00007FF61F37B4D1]\nE       \t(No symbol) [0x00007FF61F3AC28A]\nE       \t(No symbol) [0x00007FF61F37ADF6]\nE       \t(No symbol) [0x00007FF61F3AC4A0]\nE       \t(No symbol) [0x00007FF61F3CBCC7]\nE       \t(No symbol) [0x00007FF61F3AC033]\nE       \t(No symbol) [0x00007FF61F379657]\nE       \t(No symbol) [0x00007FF61F37A251]\nE       \tGetHandleVerifier [0x00007FF61F813E2D+3278285]\nE       \tGetHandleVerifier [0x00007FF61F860190+3590448]\nE       \tGetHandleVerifier [0x00007FF61F8561D0+3549552]\nE       \tGetHandleVerifier [0x00007FF61F5B1DE6+779654]\nE       \t(No symbol) [0x00007FF61F487ACF]\nE       \t(No symbol) [0x00007FF61F482EE4]\nE       \t(No symbol) [0x00007FF61F483072]\nE       \t(No symbol) [0x00007FF61F472C4F]\nE       \tBaseThreadInitThunk [0x00007FFDC3AA7344+20]\nE       \tRtlUserThreadStart [0x00007FFDC48A26B1+33]\n\nC:\\Users\\dell\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "parameters": [{"name": "setup_and_teardown", "value": "'chrome'"}], "start": 1717903739140, "stop": 1717903739168, "uuid": "29203c65-3933-42cf-a425-b166e15fb5a5", "historyId": "9267408de0694c51ea50378c8a46ca0f", "testCaseId": "24fe79612e3fe5e7e7a0862ee27582cb", "fullName": "sample.test_Login.TestLogin#test_login_with_valid_credentials", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_and_teardown', 'log_on_failure')"}, {"name": "parentSuite", "value": "sample"}, {"name": "suite", "value": "test_Login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DESKTOP-4222FVV"}, {"name": "thread", "value": "9536-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "sample.test_Login"}]}
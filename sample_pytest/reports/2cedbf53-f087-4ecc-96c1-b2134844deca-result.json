{"name": "test_search_without_providing_any_products[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\n  (Session info: chrome=126.0.6478.63)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7009E22C2+60002]\n\t(No symbol) [0x00007FF70095CA59]\n\t(No symbol) [0x00007FF700817EDA]\n\t(No symbol) [0x00007FF70080FEC2]\n\t(No symbol) [0x00007FF7008009E4]\n\t(No symbol) [0x00007FF700802232]\n\t(No symbol) [0x00007FF700800D11]\n\t(No symbol) [0x00007FF7008004F1]\n\t(No symbol) [0x00007FF700800430]\n\t(No symbol) [0x00007FF7007FE3BD]\n\t(No symbol) [0x00007FF7007FE9FC]\n\t(No symbol) [0x00007FF70081ACB1]\n\t(No symbol) [0x00007FF7008AC66E]\n\t(No symbol) [0x00007FF70088C28A]\n\t(No symbol) [0x00007FF7008ABCC7]\n\t(No symbol) [0x00007FF70088C033]\n\t(No symbol) [0x00007FF700859657]\n\t(No symbol) [0x00007FF70085A251]\n\tGetHandleVerifier [0x00007FF700CF3E2D+3278285]\n\tGetHandleVerifier [0x00007FF700D40190+3590448]\n\tGetHandleVerifier [0x00007FF700D361D0+3549552]\n\tGetHandleVerifier [0x00007FF700A91DE6+779654]\n\t(No symbol) [0x00007FF700967ACF]\n\t(No symbol) [0x00007FF700962EE4]\n\t(No symbol) [0x00007FF700963072]\n\t(No symbol) [0x00007FF700952C4F]\n\tBaseThreadInitThunk [0x00007FFAD0FE7344+20]\n\tRtlUserThreadStart [0x00007FFAD22FCC91+33]", "trace": "request = <SubRequest 'setup_and_teardown' for <Function test_search_without_providing_any_products[chrome]>>\n\n    @pytest.fixture(params=[\"chrome\",\"firefox\",\"edge\"])\n    def setup_and_teardown(request):\n      #make drive as global, Otherwise we will get problem\n      global driver\n      if request.param == \"chrome\":\n          driver = webdriver.Chrome()\n      elif request.param == \"firefox\":\n          driver = webdriver.Firefox()\n      elif request.param == \"edge\":\n          driver = webdriver.Edge()\n      else:\n          print(\"Please enter the valid browser\")\n    \n>     driver.get(\"https://tutorialsninja.com/demo/\")\n\nconftest.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\dell\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\nC:\\Users\\dell\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000028D70DAE330>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_INTERNET_DISCONNECTED\\\\...07FF700952C4F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAD0FE7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFAD22FCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\nE         (Session info: chrome=126.0.6478.63)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7009E22C2+60002]\nE       \t(No symbol) [0x00007FF70095CA59]\nE       \t(No symbol) [0x00007FF700817EDA]\nE       \t(No symbol) [0x00007FF70080FEC2]\nE       \t(No symbol) [0x00007FF7008009E4]\nE       \t(No symbol) [0x00007FF700802232]\nE       \t(No symbol) [0x00007FF700800D11]\nE       \t(No symbol) [0x00007FF7008004F1]\nE       \t(No symbol) [0x00007FF700800430]\nE       \t(No symbol) [0x00007FF7007FE3BD]\nE       \t(No symbol) [0x00007FF7007FE9FC]\nE       \t(No symbol) [0x00007FF70081ACB1]\nE       \t(No symbol) [0x00007FF7008AC66E]\nE       \t(No symbol) [0x00007FF70088C28A]\nE       \t(No symbol) [0x00007FF7008ABCC7]\nE       \t(No symbol) [0x00007FF70088C033]\nE       \t(No symbol) [0x00007FF700859657]\nE       \t(No symbol) [0x00007FF70085A251]\nE       \tGetHandleVerifier [0x00007FF700CF3E2D+3278285]\nE       \tGetHandleVerifier [0x00007FF700D40190+3590448]\nE       \tGetHandleVerifier [0x00007FF700D361D0+3549552]\nE       \tGetHandleVerifier [0x00007FF700A91DE6+779654]\nE       \t(No symbol) [0x00007FF700967ACF]\nE       \t(No symbol) [0x00007FF700962EE4]\nE       \t(No symbol) [0x00007FF700963072]\nE       \t(No symbol) [0x00007FF700952C4F]\nE       \tBaseThreadInitThunk [0x00007FFAD0FE7344+20]\nE       \tRtlUserThreadStart [0x00007FFAD22FCC91+33]\n\nC:\\Users\\dell\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "attachments": [{"name": "log", "source": "b8303cae-b243-4012-9dbc-506624141f17-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "setup_and_teardown", "value": "'chrome'"}], "start": 1718968978305, "stop": 1718968978305, "uuid": "29df978a-aa82-40ad-aac8-082021fb8ef1", "historyId": "9cc5744aea5b60099cc6ded399c378a7", "testCaseId": "c057ab9d4eee71b5cd574f74891e45cd", "fullName": "sample.test_Search.TestSearch#test_search_without_providing_any_products", "labels": [{"name": "severity", "value": "minor"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_and_teardown', 'log_on_failure')"}, {"name": "parentSuite", "value": "sample"}, {"name": "suite", "value": "test_Search"}, {"name": "subSuite", "value": "TestSearch"}, {"name": "host", "value": "DESKTOP-4222FVV"}, {"name": "thread", "value": "10532-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "sample.test_Search"}]}